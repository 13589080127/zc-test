@startuml
title:添加门锁
autonumber
participant 智能锁
participant 小程序
participant 服务端

===我的设备==
小程序->小程序:用户点击我的设备
小程序->服务端:用户查询我的设备
note left:手机号码，appId
服务端->服务端:查询t_user_lock 表 条件手机号码，appId,管理员
服务端-->小程序:返回锁名称 ,PSAM_ID（CSAM终端机编号）
小程序->小程序:展示返回设备的信息

===添加门锁==
autonumber
小程序->小程序:点击添加门锁
小程序->小程序:打开扫一扫扫描锁
小程序->小程序:根据二维码头解析二维码
小程序->服务端:调用扫一扫接口
服务端->服务端:校验二维码
alt 解析二维码失败/验签失败
服务端-->小程序:返回不识别的二维码
else 验签成功
服务端-->小程序:返回码类型和码数据
end
小程序->小程序:判断返回的结果
小程序->小程序:根据返回的码头类型跳转到不同的页面
alt 绑锁二维码
小程序->小程序:通过码取到csmaId，mac地址
小程序->智能锁: 通过mac地址连接锁，获取随机数
智能锁->智能锁: 保存随机数
小程序<--智能锁: 返回随机数
小程序->服务端:调用接口获取帮锁指令
服务端->服务端:解析二维码 得到csma卡id
服务端->服务端:根据csma卡id查询t_room_lock表是否存在
alt t_room_lock 表数据不存在
服务端->服务端:生成服务器绑定锁的指令签名
服务端-->小程序:返回指令签名
else t_room_lock已存在
服务端->服务端:查询t_user_lock表是否存在
alt t_user_lock表记录存在
服务端->服务端:判断当前锁是否是自己持有
alt 是自己持有
服务端->服务端:判断当前记录的锁名称和地址是否为空
alt 锁名称和地址为空
服务端->服务端:查询当前csam卡的终端类型t_brh_term_type得到终端logo和终端名称
服务端-->小程序: 返回绑定状态为 bindStatus = 1
else 锁名称和地址不为空
服务端-->小程序: 返回您已经是管理员不能重复绑定
end
else 不是自己持有
服务端-->小程序: 返回绑定状态为 bindStatus = 2 锁已经被其他人绑定
end
else t_user_lock表记录不存在
服务端->服务端:生成服务器绑定锁的指令签名
服务端-->小程序:返回锁的相关信息和指令签名
end
end
小程序->小程序: 判断返回的接口码和绑定状态跳转到不同的页面
小程序->智能锁: 绑定指令
智能锁->智能锁: 校验签名，比对随机数
alt 校验失败
小程序<--智能锁: 返回错误代码
小程序->小程序:提示相应的信息
else 校验成功
智能锁->智能锁:解析指令，存储管理员通行证信息\n（如有原管理员，则覆盖）
智能锁-->小程序:返回指令结果
小程序->服务端:绑定结果返回到服务端 添加门锁
note left:termId，指令信息
服务端->服务端: 验指令
alt 验签失败
服务端-->小程序:返回不识别的锁类型
else 验签成功
服务端->服务端: 校验t_room_lock表是否存在
alt 存在
服务端->服务端:校验t_user_lock表是否存在
服务端-->小程序:返回新增成功
alt 已经存在
服务端-->小程序:返回绑定失败
else 不存在
服务端->服务端:插入到t_user_lock表
end
else t_room_lock表不存在
服务端->服务端:新增t_room_lock和t_room_info
服务端->服务端:插入到t_user_lock表
服务端-->小程序:返回新增成功
end
小程序->小程序: 判断新增的结果，根据接口的返回跳转到不同的页面
小程序->小程序: 展示添加锁地址和名称页面
小程序->小程序: 输入锁的地址和名称
小程序->服务端:更新锁信息 更新门锁
服务端->服务端: 更新t_user_lock表和t_room_info表
服务端-->小程序:返回更新结果
end
end
end


@enduml