@startuml
title:添加门锁
autonumber
participant 智能锁
participant 小程序
participant 服务端
小程序->小程序:用户点击我的设备
小程序->服务端:用户查询我的设备
note left:手机号码，appId
服务端->服务端:查询T_KEY_INFO表 条件手机号码，appId,管理员
服务端->服务端:根据得出的锁id查询T_服务端_TERM_INFO 设备表
服务端-->小程序:返回锁名称 锁id，PSAM_ID（CSAM终端机编号）
小程序->小程序:展示返回设备的信息
小程序->小程序:点击添加门锁
小程序->小程序:打开扫一扫扫描锁
小程序->服务端:调用扫一扫接口获取锁的信息
服务端->服务端:解析二维码 得到锁的id
服务端->服务端:根据服务端Id查询锁的状态，校验锁的状态是否已经被绑定
服务端->服务端:生成服务器绑定锁的指令签名
服务端-->小程序:返回锁的相关信息和指令签名
小程序->小程序:判断返回结果
alt 校验失败
小程序->小程序:提示相应的信息
else 校验成功
小程序->智能锁:根据返回的mac信息连接锁
小程序->智能锁:发送绑定锁指令
智能锁-->智能锁:验指令
智能锁-->智能锁:根据六位随机数产生新的指令
智能锁-->小程序:返回指令结果
小程序->小程序:让用户输入锁名称和地址
小程序->服务端:请求绑定门锁接口
note left:termId，指令信息
服务端->服务端: 验指令
alt 验签失败
服务端-->小程序:返回不识别的锁类型
else 验签成功
服务端->服务端:校验termId是否已经被绑定
alt 已经被绑定
服务端-->小程序:返回锁已经被绑定
else 未被绑定
服务端->服务端:绑定锁和用户的管理员关系,且分配钥匙
服务端->服务端:根据服务器的ccksId对当前时间和锁的六位随机进行签名
服务端-->小程序:返回更新时间锁时间指令
小程序->智能锁:发送更新锁时间指令
智能锁->智能锁:校验签名，校验六位随机数是否存在
alt 随机数已过期
智能锁-->小程序:更新时间失败
else 随机数未过期
智能锁->智能锁:更新当前锁的时间
智能锁-->小程序:返回更新成功
end
end
end
end
@enduml